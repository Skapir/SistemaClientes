/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.time.LocalDate;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.DetalleVenta;
import modelo.DetalleVentaDAO;
import modelo.Venta;
import modelo.VentaDAO;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
import org.apache.poi.xssf.usermodel.XSSFDrawing;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author SKAPIR
 */
public final class VentasForm extends javax.swing.JPanel {

    /**
     * Creates new form VentasForm
     */
    public VentasForm() {
        initComponents();
        listarVentas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        btnExcel = new javax.swing.JButton();
        btnPdf = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setText("Listado de Ventas");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 450, 80));

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/lupa.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, -1, -1));
        add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 240, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Buscar :");
        jLabel2.setToolTipText("");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, -1));

        tablaVentas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaVentasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaVentas);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 960, 350));

        btnExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/excel.png"))); // NOI18N
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });
        add(btnExcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 120, -1, -1));

        btnPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pdf.png"))); // NOI18N
        btnPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfActionPerformed(evt);
            }
        });
        add(btnPdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 120, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfActionPerformed
        // TODO add your handling code here:
            Document documento = new Document();

    try {
        File carpeta = new File("reportes");
        if (!carpeta.exists()) carpeta.mkdir();

        String ruta = "reportes/reporte_ventas.pdf";
        PdfWriter.getInstance(documento, new FileOutputStream(ruta));
        documento.open();

        // Logo
        Image logo = Image.getInstance("src/imagenes/logo_pdf.png");
        logo.scaleToFit(100, 100);
        logo.setAlignment(Element.ALIGN_LEFT);
        documento.add(logo);

        // Título
        Paragraph titulo = new Paragraph("REPORTE DE VENTAS",
                FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, BaseColor.BLACK));
        titulo.setAlignment(Element.ALIGN_CENTER);
        titulo.setSpacingAfter(20);
        documento.add(titulo);

        // Tabla
        PdfPTable tabla = new PdfPTable(4); // ID, Cliente, Total
        tabla.setWidthPercentage(100);
        tabla.setWidths(new float[]{1f, 4f, 2f, 3f});
        tabla.setSpacingBefore(10);

        String[] headers = {"ID", "Cliente","Fecha Venta", "Total"};
        for (String h : headers) {
            PdfPCell celda = new PdfPCell(new Phrase(h, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE)));
            celda.setBackgroundColor(BaseColor.DARK_GRAY);
            celda.setHorizontalAlignment(Element.ALIGN_CENTER);
            celda.setPadding(8);
            tabla.addCell(celda);
        }

        // Datos desde tablaVentas
        for (int i = 0; i < tablaVentas.getRowCount(); i++) {
            for (int j = 0; j < tablaVentas.getColumnCount(); j++) {
                Object valor = tablaVentas.getValueAt(i, j);
                PdfPCell celda = new PdfPCell(new Phrase(valor.toString(), FontFactory.getFont(FontFactory.HELVETICA, 11)));
                celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                celda.setPadding(6);
                tabla.addCell(celda);
            }
        }

        documento.add(tabla);

        // Pie
        documento.add(new Paragraph(" "));
        Paragraph pie = new Paragraph("Generado el: " + LocalDate.now(),
                FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 9));
        pie.setAlignment(Element.ALIGN_RIGHT);
        documento.add(pie);

        documento.close();
        Desktop.getDesktop().open(new File(ruta));
        JOptionPane.showMessageDialog(this, "✅ PDF generado correctamente");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "❌ Error al generar PDF: " + e.getMessage());
    }
    }//GEN-LAST:event_btnPdfActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        // TODO add your handling code here:
            try {
        XSSFWorkbook libro = new XSSFWorkbook();
        XSSFSheet hoja = libro.createSheet("Ventas");

        // Logo
        InputStream input = new FileInputStream("src/imagenes/logo_pdf.png");
        byte[] bytes = IOUtils.toByteArray(input);
        int indiceImagen = libro.addPicture(bytes, XSSFWorkbook.PICTURE_TYPE_PNG);
        input.close();

        XSSFDrawing dibujo = hoja.createDrawingPatriarch();
        ClientAnchor anchor = new XSSFClientAnchor();
        anchor.setCol1(0);
        anchor.setRow1(0);
        dibujo.createPicture(anchor, indiceImagen).resize();

        // Título
        CellStyle estiloTitulo = libro.createCellStyle();
        XSSFFont fuenteTitulo = libro.createFont();
        fuenteTitulo.setFontHeightInPoints((short) 16);
        fuenteTitulo.setBold(true);
        estiloTitulo.setFont(fuenteTitulo);
        estiloTitulo.setAlignment(HorizontalAlignment.CENTER);

        Row filaTitulo = hoja.createRow(1);
        Cell celdaTitulo = filaTitulo.createCell(1);
        celdaTitulo.setCellValue("Reporte de Ventas");
        celdaTitulo.setCellStyle(estiloTitulo);
        hoja.addMergedRegion(new CellRangeAddress(1, 1, 1, 3));

        // Encabezados
        String[] encabezados = {"ID", "Cliente","Fecha Venta", "Total"};
        CellStyle estiloEncabezado = libro.createCellStyle();
        XSSFFont fuenteEncabezado = libro.createFont();
        fuenteEncabezado.setBold(true);
        fuenteEncabezado.setColor(IndexedColors.WHITE.getIndex());
        estiloEncabezado.setFont(fuenteEncabezado);
        estiloEncabezado.setFillForegroundColor(IndexedColors.BLUE.getIndex());
        estiloEncabezado.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        estiloEncabezado.setAlignment(HorizontalAlignment.CENTER);

        Row filaEncabezado = hoja.createRow(4);
        for (int i = 0; i < encabezados.length; i++) {
            Cell celda = filaEncabezado.createCell(i);
            celda.setCellValue(encabezados[i]);
            celda.setCellStyle(estiloEncabezado);
        }

        // Datos
        for (int i = 0; i < tablaVentas.getRowCount(); i++) {
            Row filaDatos = hoja.createRow(i + 5);
            for (int j = 0; j < tablaVentas.getColumnCount(); j++) {
                Object valor = tablaVentas.getValueAt(i, j);
                filaDatos.createCell(j).setCellValue(valor != null ? valor.toString() : "");
            }
        }

        for (int i = 0; i < encabezados.length; i++) {
            hoja.autoSizeColumn(i);
        }

        File archivo = new File("reporte_ventas.xlsx");
        FileOutputStream out = new FileOutputStream(archivo);
        libro.write(out);
        out.close();
        libro.close();

        Desktop.getDesktop().open(archivo);
        JOptionPane.showMessageDialog(null, "✅ Excel generado correctamente");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "❌ Error al generar Excel: " + e.getMessage());
    }
    }//GEN-LAST:event_btnExcelActionPerformed

    private void tablaVentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaVentasMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2 && tablaVentas.getSelectedRow() != -1) {
            int fila = tablaVentas.getSelectedRow();
            int idVenta = Integer.parseInt(tablaVentas.getValueAt(fila, 0).toString());
            mostrarBoleta(idVenta);
        }
    }//GEN-LAST:event_tablaVentasMouseClicked

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        String dni = txtBuscar.getText().trim();
        if (!dni.isEmpty()) {
        VentaDAO dao = new VentaDAO();
        List<Venta> resultados = dao.buscarVentasPorDni(dni);
        mostrarVentasEnTabla(resultados);  // Tu método para llenar la tabla
    } else {
        JOptionPane.showMessageDialog(this, "Ingrese un DNI para buscar.");
    }
    }//GEN-LAST:event_btnBuscarActionPerformed

public void listarVentas() {
    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    modelo.addColumn("ID");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha Venta");
    modelo.addColumn("Total");

    VentaDAO dao = new VentaDAO();
    for (Venta v : dao.listarTodas()) {
        modelo.addRow(new Object[]{
            v.getId(),
            v.getClienteNombre(),
            v.getFecha(),
            v.getTotal()
        });
    }

    tablaVentas.setModel(modelo);
}

private void mostrarBoleta(int idVenta) {
    VentaDAO ventaDAO = new VentaDAO();
    DetalleVentaDAO detalleDAO = new DetalleVentaDAO();
    
    Venta venta = ventaDAO.obtenerVentaPorId(idVenta);
    if (venta == null) {
        JOptionPane.showMessageDialog(this, "❌ No se encontró la venta con ID: " + idVenta);
        return;
    }

    Document documento = new Document();
    try {
        File carpeta = new File("boletas");
        if (!carpeta.exists()) carpeta.mkdir();

        String ruta = "boletas/boleta_" + idVenta + ".pdf";
        PdfWriter.getInstance(documento, new FileOutputStream(ruta));
        documento.open();

        // Logo
        Image logo = Image.getInstance("src/imagenes/logo_pdf.png");
        logo.scaleToFit(100, 100);
        logo.setAlignment(Element.ALIGN_LEFT);
        documento.add(logo);

        // Título
        Paragraph titulo = new Paragraph("BOLETA DE VENTA",
                FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, BaseColor.BLACK));
        titulo.setAlignment(Element.ALIGN_CENTER);
        documento.add(titulo);
        documento.add(new Paragraph(" "));

        // Datos de cabecera
        documento.add(new Paragraph("ID Venta: " + venta.getId()));
        documento.add(new Paragraph("Cliente: " + venta.getClienteNombre()));
        documento.add(new Paragraph("Fecha: " + venta.getFecha()));
        documento.add(new Paragraph("Total: S/ " + venta.getTotal()));
        documento.add(new Paragraph(" "));

        // Tabla de detalles
        PdfPTable tabla = new PdfPTable(3); // Código, Precio, Subtotal
        tabla.setWidthPercentage(100);
        tabla.setWidths(new float[]{2f, 4f, 2f});

        String[] headers = {"Código", "Precio", "Subtotal"};
        for (String h : headers) {
            PdfPCell celda = new PdfPCell(new Phrase(h, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE)));
            celda.setBackgroundColor(BaseColor.DARK_GRAY);
            celda.setHorizontalAlignment(Element.ALIGN_CENTER);
            celda.setPadding(6);
            tabla.addCell(celda);
        }

        // Llenar tabla con detalles de productos
        List<DetalleVenta> detalles = detalleDAO.obtenerDetallesPorVenta(idVenta);
        for (DetalleVenta d : detalles) {
            tabla.addCell(d.getProductoId());
            tabla.addCell("S/ " + d.getPrecio());
            tabla.addCell("S/ " + d.getSubtotal());
        }

        documento.add(tabla);
        documento.close();
        Desktop.getDesktop().open(new File(ruta));
        JOptionPane.showMessageDialog(this, "✅ Boleta generada correctamente");
        
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "❌ Error al generar boleta: " + e.getMessage());
    }
}

private void mostrarVentasEnTabla(List<Venta> lista) {
    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    modelo.addColumn("ID");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha");
    modelo.addColumn("Total");

    for (Venta v : lista) {
        modelo.addRow(new Object[]{
            v.getId(),
            v.getClienteNombre(),
            v.getFecha(),
            v.getTotal()
        });
    }

    tablaVentas.setModel(modelo);
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnPdf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaVentas;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.time.LocalDate;
import modelo.Producto;
import modelo.ProductoDAO;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import modelo.ProveedorDAO;
import modelo.Proveedor;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
import org.apache.poi.xssf.usermodel.XSSFDrawing;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author SKAPIR
 */
public class ProductosForm extends javax.swing.JPanel {
    Producto p = new Producto();
    ProductoDAO pdao = new ProductoDAO();
    DefaultTableModel modelo = new DefaultTableModel();
    int idProducto; // Para manejar selección en la tabla
    /**
     * Creates new form ProductosForm
     */
    public ProductosForm() {
        initComponents();
        cargarProveedores();
        listarProductos();  // nombre más claro 
        estadoInicialBotones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCodigo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblStock = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        cbxProveedor = new javax.swing.JComboBox<>();
        btnActualizar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        btnExcel = new javax.swing.JButton();
        btnPdf = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 520));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCodigo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCodigo.setText("Codigo");
        add(lblCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Nombre");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Proveedor");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, -1, -1));

        lblStock.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblStock.setText("Stock");
        add(lblStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 120, -1, -1));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitulo.setText("Gestión Productos");
        add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(265, 6, -1, 56));

        lblPrecio.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblPrecio.setText("Precio");
        add(lblPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 80, -1, -1));
        add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 320, 25));
        add(txtCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 250, 25));
        add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 80, 240, 25));
        add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 120, 200, 25));

        cbxProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxProveedorActionPerformed(evt);
            }
        });
        add(cbxProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 260, 25));

        btnActualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Actualizar (2).png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 210, 120, 38));

        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/GuardarTodo.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 210, 110, 37));

        btnNuevo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/nuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 210, 110, 39));

        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 210, 110, 38));

        tablaProductos.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProductos.getTableHeader().setResizingAllowed(false);
        tablaProductos.getTableHeader().setReorderingAllowed(false);
        tablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaProductos);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 980, 250));

        btnExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/excel.png"))); // NOI18N
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });
        add(btnExcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        btnPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pdf.png"))); // NOI18N
        btnPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfActionPerformed(evt);
            }
        });
        add(btnPdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
    // Validación de campos vacíos
    if (txtCodigo.getText().isEmpty() || txtNombre.getText().isEmpty() ||
        txtPrecio.getText().isEmpty() || txtStock.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios");
        return;
    }

    try {
        // Obtener datos del formulario
        String codigo = txtCodigo.getText();
        String nombre = txtNombre.getText();
        double precio = Double.parseDouble(txtPrecio.getText());
        int stock = Integer.parseInt(txtStock.getText());

        // Obtener proveedor seleccionado del combo
        Proveedor proveedorSeleccionado = (Proveedor) cbxProveedor.getSelectedItem();
        int idProveedor = proveedorSeleccionado.getId(); // Clave foránea

        // Crear objeto Producto
        Producto p = new Producto(0, codigo, nombre, idProveedor, precio, stock);

        // Guardar en la base de datos
        if (pdao.insertar(p)) {
            JOptionPane.showMessageDialog(this, "✔ Producto registrado.");
            listarProductos();
            limpiarCampos();
        } else {
            JOptionPane.showMessageDialog(this, "❌ Error al registrar.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Formato de número inválido en precio o stock.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
     if (idProducto == 0) {
        JOptionPane.showMessageDialog(this, "Seleccione un producto para actualizar.");
        return;
    }

    try {
        // Obtener datos del formulario
        String codigo = txtCodigo.getText();
        String nombre = txtNombre.getText();
        double precio = Double.parseDouble(txtPrecio.getText());
        int stock = Integer.parseInt(txtStock.getText());

        // Obtener proveedor seleccionado del combo
        Proveedor proveedorSeleccionado = (Proveedor) cbxProveedor.getSelectedItem();
        int idProveedor = proveedorSeleccionado.getId();

        // Crear objeto Producto actualizado
        Producto p = new Producto(idProducto, codigo, nombre, idProveedor, precio, stock);

        if (pdao.actualizar(p)) {
            JOptionPane.showMessageDialog(this, "✅ Producto actualizado.");
            listarProductos();
            limpiarCampos();
        } else {
            JOptionPane.showMessageDialog(this, "❌ Error al actualizar.");
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Formato de número inválido en precio o stock.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
    if (idProducto == 0) {
        JOptionPane.showMessageDialog(this, "Seleccione un producto para eliminar.");
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this, "¿Estás seguro de eliminar este producto?", "Confirmar", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        if (pdao.eliminar(idProducto)) {
            JOptionPane.showMessageDialog(this, "🗑️ Producto eliminado.");
            listarProductos();
            limpiarCampos();
        } else {
            JOptionPane.showMessageDialog(this, "❌ Error al eliminar.");
        }
    }       // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
    limpiarCampos(); 
    // TODO add your handling code here:
    // Activar/Desactivar botones
        btnGuardar.setEnabled(true);
        btnActualizar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnNuevo.setEnabled(false);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void tablaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductosMouseClicked
 int fila = tablaProductos.rowAtPoint(evt.getPoint());

    if (fila >= 0) {
        idProducto = Integer.parseInt(tablaProductos.getValueAt(fila, 0).toString());
        txtCodigo.setText(tablaProductos.getValueAt(fila, 1).toString());
        txtNombre.setText(tablaProductos.getValueAt(fila, 2).toString());

        // 🟡 ¡Aquí usamos la columna 3 que es ID_Proveedor!
        int idProveedorSeleccionado = Integer.parseInt(tablaProductos.getValueAt(fila, 3).toString());

        // Buscar en el combo por ID y seleccionarlo
        for (int i = 0; i < cbxProveedor.getItemCount(); i++) {
            Proveedor proveedor = cbxProveedor.getItemAt(i);
            if (proveedor.getId() == idProveedorSeleccionado) {
                cbxProveedor.setSelectedIndex(i);
                break;
            }
        }

        txtPrecio.setText(tablaProductos.getValueAt(fila, 5).toString());
        txtStock.setText(tablaProductos.getValueAt(fila, 6).toString());
        
         // Activar/Desactivar botones
        btnGuardar.setEnabled(false);
        btnNuevo.setEnabled(true);
        btnActualizar.setEnabled(true);
        btnEliminar.setEnabled(true);
    } else {
        JOptionPane.showMessageDialog(this, "Debe seleccionar una fila");
    } 
    }//GEN-LAST:event_tablaProductosMouseClicked

    private void cbxProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxProveedorActionPerformed
        // TODO add your  cod here:
    }//GEN-LAST:event_cbxProveedorActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
    try {
        // Crear libro y hoja
        XSSFWorkbook libro = new XSSFWorkbook();
        XSSFSheet hoja = libro.createSheet("Productos");

        // Insertar imagen (logo)
        InputStream input = new FileInputStream("src/imagenes/logo_pdf.png");
        byte[] bytes = IOUtils.toByteArray(input);
        int indiceImagen = libro.addPicture(bytes, XSSFWorkbook.PICTURE_TYPE_PNG);
        input.close();

        XSSFDrawing dibujo = hoja.createDrawingPatriarch();
        ClientAnchor anchor = new XSSFClientAnchor();
        anchor.setCol1(0);
        anchor.setRow1(0);
        dibujo.createPicture(anchor, indiceImagen).resize();

        // Estilo de título
        CellStyle estiloTitulo = libro.createCellStyle();
        XSSFFont fuenteTitulo = libro.createFont();
        fuenteTitulo.setFontHeightInPoints((short) 16);
        fuenteTitulo.setBold(true);
        estiloTitulo.setFont(fuenteTitulo);
        estiloTitulo.setAlignment(HorizontalAlignment.CENTER);

        Row filaTitulo = hoja.createRow(1);
        Cell celdaTitulo = filaTitulo.createCell(1);
        celdaTitulo.setCellValue("Reporte de Productos");
        celdaTitulo.setCellStyle(estiloTitulo);
        hoja.addMergedRegion(new CellRangeAddress(1, 1, 1, 5)); // corregido a 5 columnas

        // Encabezados
        String[] encabezados = {"ID", "Código", "Nombre", "Proveedor", "Precio", "Stock"};

        CellStyle estiloEncabezado = libro.createCellStyle();
        XSSFFont fuenteEncabezado = libro.createFont();
        fuenteEncabezado.setBold(true);
        fuenteEncabezado.setColor(IndexedColors.WHITE.getIndex());
        estiloEncabezado.setFont(fuenteEncabezado);
        estiloEncabezado.setFillForegroundColor(IndexedColors.BLUE.getIndex());
        estiloEncabezado.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        estiloEncabezado.setAlignment(HorizontalAlignment.CENTER);

        Row filaEncabezado = hoja.createRow(4);
        for (int i = 0; i < encabezados.length; i++) {
            Cell celda = filaEncabezado.createCell(i);
            celda.setCellValue(encabezados[i]);
            celda.setCellStyle(estiloEncabezado);
        }

        // Datos (usando solo columnas visibles)
        for (int i = 0; i < tablaProductos.getRowCount(); i++) {
            Row filaDatos = hoja.createRow(i + 5);
            filaDatos.createCell(0).setCellValue(tablaProductos.getValueAt(i, 0).toString()); // ID
            filaDatos.createCell(1).setCellValue(tablaProductos.getValueAt(i, 1).toString()); // Código
            filaDatos.createCell(2).setCellValue(tablaProductos.getValueAt(i, 2).toString()); // Nombre
            filaDatos.createCell(3).setCellValue(tablaProductos.getValueAt(i, 4).toString()); // Proveedor (nombre)
            filaDatos.createCell(4).setCellValue(tablaProductos.getValueAt(i, 5).toString()); // Precio
            filaDatos.createCell(5).setCellValue(tablaProductos.getValueAt(i, 6).toString()); // Stock
        }

        // Ajustar tamaño columnas
        for (int i = 0; i < encabezados.length; i++) {
            hoja.autoSizeColumn(i);
        }

        // Guardar archivo
        File archivo = new File("reporte_productos.xlsx");
        FileOutputStream fileOut = new FileOutputStream(archivo);
        libro.write(fileOut);
        fileOut.close();
        libro.close();

        // Abrir archivo generado
        Desktop.getDesktop().open(archivo);
        JOptionPane.showMessageDialog(null, "✅ Excel generado correctamente: " + archivo.getAbsolutePath());

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar Excel: " + e.getMessage());
    }
    }//GEN-LAST:event_btnExcelActionPerformed

    private void btnPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfActionPerformed
     Document documento = new Document();

    try {
        File carpeta = new File("reportes");
        if (!carpeta.exists()) carpeta.mkdir();

        String ruta = "reportes/reporte_productos.pdf";
        PdfWriter.getInstance(documento, new FileOutputStream(ruta));
        documento.open();

        // Logo
        Image logo = Image.getInstance("src/imagenes/logo_pdf.png");
        logo.scaleToFit(100, 100);
        logo.setAlignment(Element.ALIGN_LEFT);
        documento.add(logo);

        // Título
        Paragraph titulo = new Paragraph("REPORTE DE PRODUCTOS", 
                FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, BaseColor.BLACK));
        titulo.setAlignment(Element.ALIGN_CENTER);
        titulo.setSpacingAfter(20);
        documento.add(titulo);

        // Tabla
        PdfPTable tabla = new PdfPTable(6); // columnas visibles
        tabla.setWidthPercentage(100);
        tabla.setWidths(new float[]{2f, 3f, 3f, 3f, 2f, 2f});
        tabla.setSpacingBefore(10);

        // Encabezados
        String[] headers = {"ID", "Código", "Nombre", "Proveedor", "Precio", "Stock"};
        for (String cabecera : headers) {
            PdfPCell celdaEncabezado = new PdfPCell(new Phrase(cabecera,
                    FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE)));
            celdaEncabezado.setBackgroundColor(BaseColor.DARK_GRAY);
            celdaEncabezado.setHorizontalAlignment(Element.ALIGN_CENTER);
            celdaEncabezado.setPadding(8);
            tabla.addCell(celdaEncabezado);
        }

        // Datos de la tabla (¡usando el índice 4 para el nombre del proveedor!)
        for (int i = 0; i < tablaProductos.getRowCount(); i++) {
            tabla.addCell(tablaProductos.getValueAt(i, 0).toString()); // ID
            tabla.addCell(tablaProductos.getValueAt(i, 1).toString()); // Código
            tabla.addCell(tablaProductos.getValueAt(i, 2).toString()); // Nombre
            tabla.addCell(tablaProductos.getValueAt(i, 4).toString()); // Proveedor (nombre)
            tabla.addCell(tablaProductos.getValueAt(i, 5).toString()); // Precio
            tabla.addCell(tablaProductos.getValueAt(i, 6).toString()); // Stock
        }

        documento.add(tabla);

        // Pie de página
        documento.add(new Paragraph(" "));
        Paragraph pie = new Paragraph("Generado el: " + LocalDate.now(),
                FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 9));
        pie.setAlignment(Element.ALIGN_RIGHT);
        documento.add(pie);

        documento.close();
        Desktop.getDesktop().open(new File(ruta));
        JOptionPane.showMessageDialog(this, "✅ PDF profesional generado correctamente");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "❌ Error al generar PDF: " + e.getMessage());
    }
    }//GEN-LAST:event_btnPdfActionPerformed

 private void cargarProveedores() {
    cbxProveedor.removeAllItems();
    ProveedorDAO dao = new ProveedorDAO();

    for (Proveedor p : dao.listar()) {
        cbxProveedor.addItem(p); // gracias al toString() se muestra el nombre
    }
}
 private void limpiarCampos() {
    txtCodigo.setText("");
    txtNombre.setText("");
    cbxProveedor.setSelectedIndex(0);
    txtPrecio.setText("");
    txtStock.setText("");
    idProducto = 0;
    tablaProductos.clearSelection();
    txtCodigo.requestFocus();
}


private void listarProductos() {
    DefaultTableModel modelo = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) {
          return false; // ninguna celda será editable
        }
    };
    modelo.addColumn("ID");
    modelo.addColumn("Código");
    modelo.addColumn("Nombre");
    modelo.addColumn("ID_Proveedor"); // Columna oculta (pero necesaria)
    modelo.addColumn("Proveedor");
    modelo.addColumn("Precio");
    modelo.addColumn("Stock");

    for (Producto p : pdao.listar()) {
        // Buscar el proveedor por ID
        Proveedor proveedorEncontrado = null;
        for (int i = 0; i < cbxProveedor.getItemCount(); i++) {
            Proveedor prov = cbxProveedor.getItemAt(i);
            if (prov.getId() == p.getIdProveedor()) {
                proveedorEncontrado = prov;
                break;
            }
        }

        String nombreProveedor = (proveedorEncontrado != null) ? proveedorEncontrado.getNombre() : "Desconocido";

        modelo.addRow(new Object[]{
            p.getId(),
            p.getCodigo(),
            p.getNombre(),
            p.getIdProveedor(),           // <- Útil para setear el combo (puede ocultarse)
            nombreProveedor,             // <- Visible para el usuario
            p.getPrecio(),
            p.getStock()
        });
    }

    tablaProductos.setModel(modelo);

    // Ocultar la columna ID_Proveedor (columna 3)
    tablaProductos.getColumnModel().getColumn(3).setMinWidth(0);
    tablaProductos.getColumnModel().getColumn(3).setMaxWidth(0);
    tablaProductos.getColumnModel().getColumn(3).setWidth(0);
}
 private void estadoInicialBotones() {
        btnGuardar.setEnabled(true);
        btnNuevo.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnEliminar.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnPdf;
    private javax.swing.JComboBox<Proveedor> cbxProveedor;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblStock;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}

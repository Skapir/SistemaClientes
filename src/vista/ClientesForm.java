/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;
import java.awt.Desktop;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.time.LocalDate;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import javax.swing.JFileChooser;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
import org.apache.poi.xssf.usermodel.XSSFDrawing;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author SKAPIR
 */
public class ClientesForm extends javax.swing.JPanel {

    /**
     * Creates new form ClientesForm
     */
    public ClientesForm() {
        initComponents();
        estadoInicialBotones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNombre = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        lblCorreo = new javax.swing.JLabel();
        lblDni = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        txtDni = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        btnExcel = new javax.swing.JButton();
        btnPdf = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNombre.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblNombre.setText("Nombre:");
        add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblTitulo.setText("Gestión de Cliente");
        add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 6, 462, 56));

        lblCorreo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCorreo.setText("Correo:");
        add(lblCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        lblDni.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblDni.setText("DNI:");
        add(lblDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 165, -1, -1));

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(112, 121, 254, -1));

        txtCorreo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(112, 211, 254, -1));

        txtDni.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDniKeyTyped(evt);
            }
        });
        add(txtDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(112, 166, 254, -1));

        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/GuardarTodo.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(454, 115, 114, 35));

        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(601, 162, 114, 35));

        btnActualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Actualizar (2).png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(601, 115, -1, 35));

        btnNuevo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/nuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(454, 162, 114, 35));

        tablaClientes.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "DNI", "Correo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaClientes.setCellSelectionEnabled(true);
        tablaClientes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaClientes.getTableHeader().setResizingAllowed(false);
        tablaClientes.getTableHeader().setReorderingAllowed(false);
        tablaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaClientes);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 266, 952, 241));

        btnExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/excel.png"))); // NOI18N
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });
        add(btnExcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 230, -1, -1));

        btnPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pdf.png"))); // NOI18N
        btnPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfActionPerformed(evt);
            }
        });
        add(btnPdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 230, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        String nombre = txtNombre.getText();
        String dni = txtDni.getText();
        String correo = txtCorreo.getText();

        if (nombre.isEmpty() || dni.isEmpty() || correo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Completa todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        modelo.Cliente cliente = new modelo.Cliente(nombre, dni, correo);
        modelo.ClienteDAO dao = new modelo.ClienteDAO();

        if (dao.insertar(cliente)) {
            JOptionPane.showMessageDialog(this, "✅ Cliente registrado.");
            limpiarCampos();
            listarClientes(); // ← actualiza tabla
        } else {
            JOptionPane.showMessageDialog(this, "❌ Error al registrar.", "Error", JOptionPane.ERROR_MESSAGE);
        }     // TODO add your handling code here:
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void tablaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClientesMouseClicked
        // TODO add your handling code here:
        int fila = tablaClientes.getSelectedRow();
        if (fila != -1) {
        txtNombre.setText(tablaClientes.getValueAt(fila, 1).toString());
        txtDni.setText(tablaClientes.getValueAt(fila, 2).toString());
        txtCorreo.setText(tablaClientes.getValueAt(fila, 3).toString());
        
        // Activar/Desactivar botones
        btnGuardar.setEnabled(false);
        btnNuevo.setEnabled(true);
        btnActualizar.setEnabled(true);
        btnEliminar.setEnabled(true);
    }
    }//GEN-LAST:event_tablaClientesMouseClicked

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        int fila = tablaClientes.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un cliente para actualizar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int id = Integer.parseInt(tablaClientes.getValueAt(fila, 0).toString());
        String nombre = txtNombre.getText();
        String dni = txtDni.getText();
        String correo = txtCorreo.getText();

        modelo.Cliente cliente = new modelo.Cliente(id, nombre, dni, correo);
        modelo.ClienteDAO dao = new modelo.ClienteDAO();

        if (dao.actualizar(cliente)) {
            JOptionPane.showMessageDialog(this, "Cliente actualizado correctamente.");
            listarClientes();
            limpiarCampos();
        } else {
            JOptionPane.showMessageDialog(this, "Error al actualizar el cliente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int fila = tablaClientes.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un cliente para eliminar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "¿Seguro que deseas eliminar este cliente?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int id = Integer.parseInt(tablaClientes.getValueAt(fila, 0).toString());
            modelo.ClienteDAO dao = new modelo.ClienteDAO();
            if (dao.eliminar(id)) {
                JOptionPane.showMessageDialog(this, "Cliente eliminado correctamente.");
                listarClientes();
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el cliente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        limpiarCampos();
        
        // Activar/Desactivar botones
        btnGuardar.setEnabled(true);
        btnActualizar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnNuevo.setEnabled(false);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void txtDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDniKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
    
    // Solo permite números
    if (!Character.isDigit(c)) {
        evt.consume(); // ignora la tecla
    }

    // Limita a 8 caracteres
    if (txtDni.getText().length() >= 8) {
        evt.consume(); // ignora si ya hay 8 caracteres
    }
    }//GEN-LAST:event_txtDniKeyTyped

    private void btnPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfActionPerformed
   Document documento = new Document();

    try {
        File carpeta = new File("reportes");
        if (!carpeta.exists()) carpeta.mkdir();

        String ruta = "reportes/reporte_clientes.pdf";
        PdfWriter.getInstance(documento, new FileOutputStream(ruta));
        documento.open();

        // Añadir logo
        Image logo = Image.getInstance("src/imagenes/logo_pdf.png");
        logo.scaleToFit(100, 100);
        logo.setAlignment(Element.ALIGN_LEFT);
        documento.add(logo);

        // Título
        Paragraph titulo = new Paragraph("REPORTE DE CLIENTES", 
                FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, BaseColor.BLACK));
        titulo.setAlignment(Element.ALIGN_CENTER);
        titulo.setSpacingAfter(20);
        documento.add(titulo);

        // Tabla
        PdfPTable tabla = new PdfPTable(4);
        tabla.setWidthPercentage(100);
        tabla.setWidths(new float[]{1.5f, 3f, 2f, 4f});
        tabla.setSpacingBefore(10);

        // Encabezados
        String[] headers = {"ID", "Nombre", "DNI", "Correo"};
        for (String cabecera : headers) {
            PdfPCell celdaEncabezado = new PdfPCell(new Phrase(cabecera,
                FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE)));
            celdaEncabezado.setBackgroundColor(BaseColor.DARK_GRAY);
            celdaEncabezado.setHorizontalAlignment(Element.ALIGN_CENTER);
            celdaEncabezado.setPadding(8);
            tabla.addCell(celdaEncabezado);
        }

        // Datos
        for (int i = 0; i < tablaClientes.getRowCount(); i++) {
            for (int j = 0; j < tablaClientes.getColumnCount(); j++) {
                String valor = tablaClientes.getValueAt(i, j).toString();
                PdfPCell celda = new PdfPCell(new Phrase(valor,
                    FontFactory.getFont(FontFactory.HELVETICA, 11)));
                celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                celda.setPadding(6);
                tabla.addCell(celda);
            }
        }

        documento.add(tabla);

        // Pie de página
        documento.add(new Paragraph(" "));
        Paragraph pie = new Paragraph("Generado el: " + LocalDate.now(),
            FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 9));
        pie.setAlignment(Element.ALIGN_RIGHT);
        documento.add(pie);

        documento.close();
        Desktop.getDesktop().open(new File(ruta));
        JOptionPane.showMessageDialog(this, "✅ PDF profesional generado correctamente");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "❌ Error al generar PDF: " + e.getMessage());
    }
    }//GEN-LAST:event_btnPdfActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
    try {
        // Crear libro y hoja
        XSSFWorkbook libro = new XSSFWorkbook();
        XSSFSheet hoja = libro.createSheet("Clientes");

        // Insertar imagen (logo)
        InputStream input = new FileInputStream("src/imagenes/logo_pdf.png");
        byte[] bytes = IOUtils.toByteArray(input);
        int indiceImagen = libro.addPicture(bytes, XSSFWorkbook.PICTURE_TYPE_PNG);
        input.close();

        XSSFDrawing dibujo = hoja.createDrawingPatriarch();
        ClientAnchor anchor = new XSSFClientAnchor();
        anchor.setCol1(0);
        anchor.setRow1(0);
        dibujo.createPicture(anchor, indiceImagen).resize();

        // Estilo de título
        CellStyle estiloTitulo = libro.createCellStyle();
        XSSFFont fuenteTitulo = libro.createFont();
        fuenteTitulo.setFontHeightInPoints((short) 16);
        fuenteTitulo.setBold(true);
        estiloTitulo.setFont(fuenteTitulo);
        estiloTitulo.setAlignment(HorizontalAlignment.CENTER);

        Row filaTitulo = hoja.createRow(1);
        Cell celdaTitulo = filaTitulo.createCell(1);
        celdaTitulo.setCellValue("Reporte de Clientes");
        celdaTitulo.setCellStyle(estiloTitulo);
        hoja.addMergedRegion(new CellRangeAddress(1, 1, 1, 3));

        // Encabezados
        String[] encabezados = {"ID", "Nombre", "DNI", "Correo"};

        CellStyle estiloEncabezado = libro.createCellStyle();
        XSSFFont fuenteEncabezado = libro.createFont();
        fuenteEncabezado.setBold(true);
        fuenteEncabezado.setColor(IndexedColors.WHITE.getIndex());
        estiloEncabezado.setFont(fuenteEncabezado);
        estiloEncabezado.setFillForegroundColor(IndexedColors.BLUE.getIndex());
        estiloEncabezado.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        estiloEncabezado.setAlignment(HorizontalAlignment.CENTER);

        Row filaEncabezado = hoja.createRow(4);
        for (int i = 0; i < encabezados.length; i++) {
            Cell celda = filaEncabezado.createCell(i);
            celda.setCellValue(encabezados[i]);
            celda.setCellStyle(estiloEncabezado);
        }

        // Datos desde JTable (tablaClientes)
        for (int i = 0; i < tablaClientes.getRowCount(); i++) {
            Row filaDatos = hoja.createRow(i + 5);
            for (int j = 0; j < tablaClientes.getColumnCount(); j++) {
                Object valor = tablaClientes.getValueAt(i, j);
                filaDatos.createCell(j).setCellValue(valor != null ? valor.toString() : "");
            }
        }

        // Ajustar tamaño de columnas
        for (int i = 0; i < encabezados.length; i++) {
            hoja.autoSizeColumn(i);
        }

        // Guardar archivo
        File archivo = new File("reporte_clientes.xlsx");
        FileOutputStream fileOut = new FileOutputStream(archivo);
        libro.write(fileOut);
        fileOut.close();
        libro.close();

        // Abrir archivo generado
        Desktop.getDesktop().open(archivo);
        JOptionPane.showMessageDialog(null, "✅ Excel generado correctamente: " + archivo.getAbsolutePath());

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar Excel: " + e.getMessage());
    }
    }//GEN-LAST:event_btnExcelActionPerformed

    private void limpiarCampos() {
        txtNombre.setText("");
        txtDni.setText("");
        txtCorreo.setText("");
        tablaClientes.clearSelection();
        txtNombre.requestFocus();
    }
    public void listarClientes() {
        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // ninguna celda será editable
            }
        };

        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("DNI");
        modelo.addColumn("Correo");

        modelo.ClienteDAO dao = new modelo.ClienteDAO();
        for (modelo.Cliente c : dao.listar()) {
            Object[] fila = { c.getId(), c.getNombre(), c.getDni(), c.getCorreo() };
            modelo.addRow(fila);
        }

        tablaClientes.setModel(modelo);
    }
    private void estadoInicialBotones() {
        btnGuardar.setEnabled(true);
        btnNuevo.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnEliminar.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnPdf;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCorreo;
    private javax.swing.JLabel lblDni;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
